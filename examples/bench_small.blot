start = time_now()

// Helper functions for mathematical operations
fibonacci = n => if n <= 1 then n else fibonacci(n - 1) + fibonacci(n - 2) 

factorial = n => if n <= 1 then 1 else n * factorial(n - 1)

is_divisible_by_any = (n, factors) =>
    if len(factors) == 0 then false
    else if n % factors[0] == 0 then true
    else is_divisible_by_any(n, tail(factors))

is_prime = n => 
    if n <= 1 then false
    else if n <= 3 then true
    else if n % 2 == 0 then false
    else !is_divisible_by_any(n, (range(floor(sqrt(n)) - 2)) + 3)

// Complex number operations using records
complex_add = (a, b) => [a[0] + b[0], a[1] + b[1]]

complex_mul = (a, b) => [
    a[0] * b[0] - a[1] * b[1],
    a[0] * b[1] + a[1] * b[0]
]

complex_mag = z => z[0] * z[0] + z[1] * z[1]

mandelbrot = (x, y, max_iter, iter, z) =>
    if iter >= max_iter then iter
    else if complex_mag(z) > 4 then iter
    else mandelbrot(
        x, y, max_iter, 
        iter + 1,
        complex_add(complex_mul(z, z), [x, y])
    )

// Main computation that exercises different language features
benchmark = n => {
    primes: filter(range(n), is_prime),
    fibs: map(range(10), (i) => fibonacci(i)),  // Reduced from n to 10
    factorials: map(range(10), (i) => factorial(i)),  // Reduced from n to 10
    reverse_test: reverse(range(n)),
    mandel_test: map([[-2, -1], [-1, 0], [0, 0], [0.25, 0]], (point) => mandelbrot(point[0], point[1], 50, 0, [0, 0])),  // Reduced from 100 to 50
    sum_squares: sum(...map(range(n), (i) => i * i)),
    trig_test: map(range(10), (i) => [sin(i), cos(i), tan(i)])  // Reduced from n to 10
}

// Run benchmark
results = benchmark(15)  // Reduced from 30 to 15

print("that took {} seconds", time_now() - start)
print("results: {}", results)