compound_interest = (P, r, t, n) => P * (1 + r/n)^(n*t)

// Example parameters
principal = inputs.principal
compounding_frequency = 1  // compounded annually
years = range(inputs.years)

// Create a more readable output with year-value pairs
output timeseries_with_years = map(years, t => do {
  poorCalc = if inputs.include_poor then compound_interest(principal, inputs.annual_rate - inputs.outcome_range, t, compounding_frequency) else 0
  avgCalc = compound_interest(principal, inputs.annual_rate, t, compounding_frequency)
  goodCalc = compound_interest(principal, inputs.annual_rate + inputs.outcome_range, t, compounding_frequency)
  return {
    x: inputs.starting_year + t,
    poor: poorCalc,
    average: avgCalc,
    good: goodCalc
  }
})