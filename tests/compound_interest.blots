compound_interest = (P, r, t, n) => P * (1 + r/n)^(n*t)

// Example parameters
principal = inputs.principal
compounding_frequency = 1  // compounded annually
years = range(inputs.years)

// Create a more readable output map year-value pairs
output timeseries_with_years = map(years, t => {
  x: inputs.starting_year + t,
  ...(if inputs.include_poor then {poor: compound_interest(principal, inputs.annual_rate - inputs.outcome_range, t, compounding_frequency)} else {}),
  average: compound_interest(principal, inputs.annual_rate, t, compounding_frequency),
  good: compound_interest(principal, inputs.annual_rate + inputs.outcome_range, t, compounding_frequency)
})