WHITESPACE = _{ " " | "\t" }
NEWLINE    = _{ comment? ~ ("\r\n" | "\n") }
comment    = _{ "//" ~ (!NEWLINE ~ ANY)* }

number  = @{ (integer ~ ("_"+ ~ integer)* ~ ("." ~ ASCII_DIGIT+)? | !integer ~ "." ~ ASCII_DIGIT+) ~ (^"e" ~ integer)? }
integer = _{ ("+" | "-")? ~ ASCII_DIGIT+ }

bool = { "true" | "false" }

null = { "null" }

string_value = @{ (!PEEK ~ ANY)* }
string       = ${ PUSH("\"" | "'") ~ string_value ~ POP }

lambda        = ${ argument_list ~ WHITESPACE* ~ "=>" ~ WHITESPACE* ~ expression }
argument_list = !{ identifier | "(" ~ NEWLINE* ~ (identifier ~ ("," ~ NEWLINE* ~ identifier)*)? ~ ("," ~ NEWLINE)? ~ NEWLINE* ~ ")" }

identifier      = @{ (ASCII_ALPHA | "_")+ ~ identifier_rest* }
identifier_rest = _{ ASCII_ALPHA+ | ASCII_DIGIT+ | "_"+ }

infix_op        = _{ add | subtract | multiply | divide | modulo | power | equal | not_equal | less_eq | less | greater_eq | greater | each_equal | each_not_equal | each_less_eq | each_less | each_greater_eq | each_greater | and | or }
add             =  { "+" }
subtract        =  { "-" }
multiply        =  { "*" }
divide          =  { "/" }
modulo          =  { "%" }
power           =  { "^" }
equal           =  { "==" }
not_equal       =  { "!=" }
less_eq         =  { "<=" }
less            =  { "<" }
greater_eq      =  { ">=" }
greater         =  { ">" }
each_equal      =  { "[==]" }
each_not_equal  =  { "[!=]" }
each_less_eq    =  { "[<=]" }
each_less       =  { "[<]" }
each_greater_eq =  { "[>=]" }
each_greater    =  { "[>]" }
and             =  { "and" | "&&" }
or              =  { "or" | "||" }

prefix_op = _{ negation | invert }
negation  =  { "-" }
invert    =  { "!" }

postfix_op  = _{ factorial | list_access | call_list }
factorial   =  { "!" }
list_access =  { "[" ~ NEWLINE* ~ expression ~ NEWLINE* ~ "]" }
call_list   = !{ "(" ~ NEWLINE* ~ (spreadable_expression ~ ("," ~ NEWLINE* ~ spreadable_expression)*)? ~ ("," ~ NEWLINE)? ~ NEWLINE* ~ ")" }

spread_operator       =  { "..." }
spread_expression     = ${ spread_operator ~ expression }
spreadable_expression = _{ spread_expression | expression }

list = !{ "[]" | "[" ~ NEWLINE* ~ spreadable_expression ~ ("," ~ NEWLINE* ~ spreadable_expression)* ~ ("," ~ NEWLINE)? ~ NEWLINE* ~ "]" }

conditional = ${ "if" ~ WHITESPACE+ ~ expression ~ WHITESPACE+ ~ "then" ~ (WHITESPACE | NEWLINE)+ ~ expression ~ (WHITESPACE | NEWLINE)+ ~ "else" ~ (WHITESPACE | NEWLINE)+ ~ expression }

expression        = ${ prefix_op* ~ term ~ postfix_op* ~ (WHITESPACE* ~ infix_op ~ WHITESPACE* ~ prefix_op* ~ term ~ postfix_op*)* }
nested_expression = _{ "(" ~ (WHITESPACE | NEWLINE)* ~ expression ~ (WHITESPACE | NEWLINE)* ~ ")" }
term              = _{ conditional | lambda | assignment | list | bool | string | null | identifier | number | nested_expression }

assignment = !{ identifier ~ "=" ~ expression }

statement =  { (expression | comment) ~ comment? }
input     = _{ SOI ~ statement? ~ (NEWLINE ~ statement?)* ~ EOI }
