WHITESPACE = _{ " " | "\t" }
NEWLINE    = _{ comment? ~ ("\r\n" | "\n") }
comment    = _{ "//" ~ (!NEWLINE ~ ANY)* }

number  = @{ (integer ~ ("_"+ ~ integer)* ~ ("." ~ ASCII_DIGIT+)? | !integer ~ "." ~ ASCII_DIGIT+) ~ (^"e" ~ integer)? }
integer = _{ ("+" | "-")? ~ ASCII_DIGIT+ }

bool = { "true" | "false" }

null = { "null" }

string_value = @{ (!PEEK ~ ANY)* }
string       = ${ PUSH("\"" | "'") ~ string_value ~ POP }

lambda        = ${ argument_list ~ WHITESPACE* ~ "=>" ~ (WHITESPACE | NEWLINE)* ~ expression }
argument_list = !{ argument | "(" ~ NEWLINE* ~ (argument ~ ("," ~ NEWLINE* ~ argument)*)? ~ ("," ~ NEWLINE)? ~ NEWLINE* ~ ")" }
argument      = _{ optional_arg | required_arg | rest_arg }
required_arg  =  { identifier }
optional_arg  =  { identifier ~ "?" }
rest_arg      =  { "..." ~ identifier }

identifier      = @{ !(reserved_word ~ !identifier_rest) ~ (ASCII_ALPHA | "_")+ ~ identifier_rest* }
reserved_word   = _{ "if" | "then" | "else" | "true" | "false" | "null" | "and" | "or" | "not" | "with" | "do" | "return" | "output" }
identifier_rest = _{ ASCII_ALPHA+ | ASCII_DIGIT+ | "_"+ }

infix_op   = _{ add | subtract | multiply | divide | modulo | power | equal | not_equal | less_eq | less | greater_eq | greater | and | or | coalesce }
add        =  { "+" }
subtract   =  { "-" }
multiply   =  { "*" }
divide     =  { "/" }
modulo     =  { "%" }
power      =  { "^" }
equal      =  { "==" }
not_equal  =  { "!=" }
less_eq    =  { "<=" }
less       =  { "<" }
greater_eq =  { ">=" }
greater    =  { ">" }
and        =  { "&&" }
or         =  { "||" }
coalesce   =  { "??" }

natural_infix_op = _{ natural_and | natural_or | with }
natural_and      =  { "and" }
natural_or       =  { "or" }
with             =  { "with" }

infix_usage = _{ (WHITESPACE | NEWLINE)+ ~ natural_infix_op ~ WHITESPACE+ | (WHITESPACE | NEWLINE)* ~ infix_op ~ WHITESPACE* }

prefix_op = _{ negation | invert | not }
negation  =  { "-" }
invert    =  { "!" }
not       =  { "not" }

prefix_usage = _{ not ~ WHITESPACE+ | prefix_op }

postfix_op = _{ factorial | access | call_list | dot_access }
factorial  =  { "!" }
access     =  { "[" ~ NEWLINE* ~ expression ~ NEWLINE* ~ "]" }
dot_access =  { "." ~ identifier }
call_list  = !{ "(" ~ NEWLINE* ~ (spreadable_expression ~ ("," ~ NEWLINE* ~ spreadable_expression)*)? ~ ("," ~ NEWLINE)? ~ NEWLINE* ~ ")" }

spread_operator       =  { "..." }
spread_expression     = ${ spread_operator ~ expression }
spreadable_expression = _{ spread_expression | expression }

list = !{ "[]" | "[" ~ NEWLINE* ~ spreadable_expression ~ ("," ~ NEWLINE* ~ spreadable_expression)* ~ ("," ~ NEWLINE)? ~ NEWLINE* ~ "]" }

record_key_static  =  { identifier | string }
record_key_dynamic =  { "[" ~ expression ~ "]" }
record_key         = _{ record_key_static | record_key_dynamic }
record_pair        = !{ record_key ~ ":" ~ NEWLINE* ~ expression }
record_shorthand   =  { identifier }
record             = !{ "{}" | "{" ~ NEWLINE* ~ ((record_pair | record_shorthand | spread_expression) ~ ("," ~ NEWLINE* ~ (record_pair | record_shorthand | spread_expression))*)? ~ ("," ~ NEWLINE)? ~ NEWLINE* ~ "}" }

conditional = ${ "if" ~ WHITESPACE+ ~ expression ~ WHITESPACE+ ~ "then" ~ (WHITESPACE | NEWLINE)+ ~ expression ~ (WHITESPACE | NEWLINE)+ ~ "else" ~ (WHITESPACE | NEWLINE)+ ~ expression }

expression        = ${ prefix_usage* ~ term ~ postfix_op* ~ (infix_usage ~ prefix_usage* ~ term ~ postfix_op*)* }
nested_expression = _{ "(" ~ (WHITESPACE | NEWLINE)* ~ expression ~ (WHITESPACE | NEWLINE)* ~ ")" }
term              = _{ conditional | do_block | lambda | assignment | list | record | bool | string | null | identifier | number | nested_expression }

assignment = !{ identifier ~ "=" ~ expression }

output_declaration = ${ "output" ~ WHITESPACE+ ~ (assignment | identifier) }

do_statement     =  { (expression | comment) ~ comment? }
return_statement = ${ WHITESPACE* ~ "return" ~ WHITESPACE+ ~ expression }
do_block         = ${ "do" ~ (WHITESPACE | NEWLINE)+ ~ "{" ~ (WHITESPACE | NEWLINE)* ~ (WHITESPACE* ~ do_statement ~ WHITESPACE* ~ (NEWLINE+ | ";") ~ (WHITESPACE | NEWLINE)*)* ~ (WHITESPACE | NEWLINE)* ~ return_statement ~ (WHITESPACE | NEWLINE)* ~ "}" }

statement =  { (output_declaration | expression | comment) ~ comment? }
input     = _{ SOI ~ statement? ~ (NEWLINE ~ statement?)* ~ EOI }
